// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"dblock/ent/dlock"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// DLockCreate is the builder for creating a DLock entity.
type DLockCreate struct {
	config
	mutation *DLockMutation
	hooks    []Hook
}

// SetHolder sets the "holder" field.
func (dc *DLockCreate) SetHolder(u uuid.UUID) *DLockCreate {
	dc.mutation.SetHolder(u)
	return dc
}

// SetNillableHolder sets the "holder" field if the given value is not nil.
func (dc *DLockCreate) SetNillableHolder(u *uuid.UUID) *DLockCreate {
	if u != nil {
		dc.SetHolder(*u)
	}
	return dc
}

// SetDeadline sets the "deadline" field.
func (dc *DLockCreate) SetDeadline(i int64) *DLockCreate {
	dc.mutation.SetDeadline(i)
	return dc
}

// SetID sets the "id" field.
func (dc *DLockCreate) SetID(s string) *DLockCreate {
	dc.mutation.SetID(s)
	return dc
}

// Mutation returns the DLockMutation object of the builder.
func (dc *DLockCreate) Mutation() *DLockMutation {
	return dc.mutation
}

// Save creates the DLock in the database.
func (dc *DLockCreate) Save(ctx context.Context) (*DLock, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DLockCreate) SaveX(ctx context.Context) *DLock {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DLockCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DLockCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DLockCreate) defaults() {
	if _, ok := dc.mutation.Holder(); !ok {
		v := dlock.DefaultHolder()
		dc.mutation.SetHolder(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DLockCreate) check() error {
	if _, ok := dc.mutation.Holder(); !ok {
		return &ValidationError{Name: "holder", err: errors.New(`ent: missing required field "DLock.holder"`)}
	}
	if _, ok := dc.mutation.Deadline(); !ok {
		return &ValidationError{Name: "deadline", err: errors.New(`ent: missing required field "DLock.deadline"`)}
	}
	if v, ok := dc.mutation.Deadline(); ok {
		if err := dlock.DeadlineValidator(v); err != nil {
			return &ValidationError{Name: "deadline", err: fmt.Errorf(`ent: validator failed for field "DLock.deadline": %w`, err)}
		}
	}
	if v, ok := dc.mutation.ID(); ok {
		if err := dlock.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "DLock.id": %w`, err)}
		}
	}
	return nil
}

func (dc *DLockCreate) sqlSave(ctx context.Context) (*DLock, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected DLock.ID type: %T", _spec.ID.Value)
		}
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DLockCreate) createSpec() (*DLock, *sqlgraph.CreateSpec) {
	var (
		_node = &DLock{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(dlock.Table, sqlgraph.NewFieldSpec(dlock.FieldID, field.TypeString))
	)
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.Holder(); ok {
		_spec.SetField(dlock.FieldHolder, field.TypeUUID, value)
		_node.Holder = value
	}
	if value, ok := dc.mutation.Deadline(); ok {
		_spec.SetField(dlock.FieldDeadline, field.TypeInt64, value)
		_node.Deadline = value
	}
	return _node, _spec
}

// DLockCreateBulk is the builder for creating many DLock entities in bulk.
type DLockCreateBulk struct {
	config
	err      error
	builders []*DLockCreate
}

// Save creates the DLock entities in the database.
func (dcb *DLockCreateBulk) Save(ctx context.Context) ([]*DLock, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*DLock, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DLockMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DLockCreateBulk) SaveX(ctx context.Context) []*DLock {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DLockCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DLockCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
