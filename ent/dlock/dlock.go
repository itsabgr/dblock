// Code generated by ent, DO NOT EDIT.

package dlock

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the dlock type in the database.
	Label = "dlock"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHolder holds the string denoting the holder field in the database.
	FieldHolder = "holder"
	// FieldDeadline holds the string denoting the deadline field in the database.
	FieldDeadline = "deadline"
	// Table holds the table name of the dlock in the database.
	Table = "dlocks"
)

// Columns holds all SQL columns for dlock fields.
var Columns = []string{
	FieldID,
	FieldHolder,
	FieldDeadline,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultHolder holds the default value on creation for the "holder" field.
	DefaultHolder func() uuid.UUID
	// DeadlineValidator is a validator for the "deadline" field. It is called by the builders before save.
	DeadlineValidator func(int64) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the DLock queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHolder orders the results by the holder field.
func ByHolder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHolder, opts...).ToFunc()
}

// ByDeadline orders the results by the deadline field.
func ByDeadline(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeadline, opts...).ToFunc()
}
