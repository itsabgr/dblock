// Code generated by ent, DO NOT EDIT.

package dlock

import (
	"github.com/itsabgr/dblock/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.DLock {
	return predicate.DLock(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.DLock {
	return predicate.DLock(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.DLock {
	return predicate.DLock(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.DLock {
	return predicate.DLock(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.DLock {
	return predicate.DLock(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.DLock {
	return predicate.DLock(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.DLock {
	return predicate.DLock(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.DLock {
	return predicate.DLock(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.DLock {
	return predicate.DLock(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.DLock {
	return predicate.DLock(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.DLock {
	return predicate.DLock(sql.FieldContainsFold(FieldID, id))
}

// Holder applies equality check predicate on the "holder" field. It's identical to HolderEQ.
func Holder(v uuid.UUID) predicate.DLock {
	return predicate.DLock(sql.FieldEQ(FieldHolder, v))
}

// Deadline applies equality check predicate on the "deadline" field. It's identical to DeadlineEQ.
func Deadline(v int64) predicate.DLock {
	return predicate.DLock(sql.FieldEQ(FieldDeadline, v))
}

// HolderEQ applies the EQ predicate on the "holder" field.
func HolderEQ(v uuid.UUID) predicate.DLock {
	return predicate.DLock(sql.FieldEQ(FieldHolder, v))
}

// HolderNEQ applies the NEQ predicate on the "holder" field.
func HolderNEQ(v uuid.UUID) predicate.DLock {
	return predicate.DLock(sql.FieldNEQ(FieldHolder, v))
}

// HolderIn applies the In predicate on the "holder" field.
func HolderIn(vs ...uuid.UUID) predicate.DLock {
	return predicate.DLock(sql.FieldIn(FieldHolder, vs...))
}

// HolderNotIn applies the NotIn predicate on the "holder" field.
func HolderNotIn(vs ...uuid.UUID) predicate.DLock {
	return predicate.DLock(sql.FieldNotIn(FieldHolder, vs...))
}

// HolderGT applies the GT predicate on the "holder" field.
func HolderGT(v uuid.UUID) predicate.DLock {
	return predicate.DLock(sql.FieldGT(FieldHolder, v))
}

// HolderGTE applies the GTE predicate on the "holder" field.
func HolderGTE(v uuid.UUID) predicate.DLock {
	return predicate.DLock(sql.FieldGTE(FieldHolder, v))
}

// HolderLT applies the LT predicate on the "holder" field.
func HolderLT(v uuid.UUID) predicate.DLock {
	return predicate.DLock(sql.FieldLT(FieldHolder, v))
}

// HolderLTE applies the LTE predicate on the "holder" field.
func HolderLTE(v uuid.UUID) predicate.DLock {
	return predicate.DLock(sql.FieldLTE(FieldHolder, v))
}

// DeadlineEQ applies the EQ predicate on the "deadline" field.
func DeadlineEQ(v int64) predicate.DLock {
	return predicate.DLock(sql.FieldEQ(FieldDeadline, v))
}

// DeadlineNEQ applies the NEQ predicate on the "deadline" field.
func DeadlineNEQ(v int64) predicate.DLock {
	return predicate.DLock(sql.FieldNEQ(FieldDeadline, v))
}

// DeadlineIn applies the In predicate on the "deadline" field.
func DeadlineIn(vs ...int64) predicate.DLock {
	return predicate.DLock(sql.FieldIn(FieldDeadline, vs...))
}

// DeadlineNotIn applies the NotIn predicate on the "deadline" field.
func DeadlineNotIn(vs ...int64) predicate.DLock {
	return predicate.DLock(sql.FieldNotIn(FieldDeadline, vs...))
}

// DeadlineGT applies the GT predicate on the "deadline" field.
func DeadlineGT(v int64) predicate.DLock {
	return predicate.DLock(sql.FieldGT(FieldDeadline, v))
}

// DeadlineGTE applies the GTE predicate on the "deadline" field.
func DeadlineGTE(v int64) predicate.DLock {
	return predicate.DLock(sql.FieldGTE(FieldDeadline, v))
}

// DeadlineLT applies the LT predicate on the "deadline" field.
func DeadlineLT(v int64) predicate.DLock {
	return predicate.DLock(sql.FieldLT(FieldDeadline, v))
}

// DeadlineLTE applies the LTE predicate on the "deadline" field.
func DeadlineLTE(v int64) predicate.DLock {
	return predicate.DLock(sql.FieldLTE(FieldDeadline, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DLock) predicate.DLock {
	return predicate.DLock(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DLock) predicate.DLock {
	return predicate.DLock(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DLock) predicate.DLock {
	return predicate.DLock(sql.NotPredicates(p))
}
