// Code generated by ent, DO NOT EDIT.

package ent

import (
	"dblock/ent/dlock"
	"dblock/ent/schema"

	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	dlockFields := schema.DLock{}.Fields()
	_ = dlockFields
	// dlockDescHolder is the schema descriptor for holder field.
	dlockDescHolder := dlockFields[1].Descriptor()
	// dlock.DefaultHolder holds the default value on creation for the holder field.
	dlock.DefaultHolder = dlockDescHolder.Default.(func() uuid.UUID)
	// dlockDescDeadline is the schema descriptor for deadline field.
	dlockDescDeadline := dlockFields[2].Descriptor()
	// dlock.DeadlineValidator is a validator for the "deadline" field. It is called by the builders before save.
	dlock.DeadlineValidator = func() func(int64) error {
		validators := dlockDescDeadline.Validators
		fns := [...]func(int64) error{
			validators[0].(func(int64) error),
			validators[1].(func(int64) error),
			validators[2].(func(int64) error),
		}
		return func(deadline int64) error {
			for _, fn := range fns {
				if err := fn(deadline); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// dlockDescID is the schema descriptor for id field.
	dlockDescID := dlockFields[0].Descriptor()
	// dlock.IDValidator is a validator for the "id" field. It is called by the builders before save.
	dlock.IDValidator = func() func(string) error {
		validators := dlockDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
